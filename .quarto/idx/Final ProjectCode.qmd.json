{"title":"Final Project Code","markdown":{"yaml":{"title":"Final Project Code","format":"html","editor":"visual"},"headingText":"[**RESEARCH QUESTION- 1**]{.underline}","containsRefs":false,"markdown":"\n\n\n**How does physical activity level influence sleep quality across different age groups?**\n\n```{r}\n# Load necessary libraries\nlibrary(glmnet)\nlibrary(plotly)\nlibrary(ggplot2)\n# Load the dataset\ndata1 <- read.csv(\"C:/Users/ACER/Desktop/New folder/Sai Sriram Uppada/FinalProject/Sleep_health_and_lifestyle_dataset.csv\")  \n\n# Replace with the path to the original dataset\n\n# Prepare the data\n# Assuming 'Quality_of_Sleep' is a continuous variable and both 'Age' and 'Physical_Activity_Level' are already numerical.\nx <- model.matrix(Quality.of.Sleep ~ Age * Physical.Activity.Level, data = data1)[, -1]  # removing intercept\ny <- data1$Quality.of.Sleep\n\n# Fit Lasso Regression model\nlasso_model <- glmnet(x, y, alpha = 1)  # alpha = 1 for Lasso\n\n# Cross-validation for optimal lambda\ncv_lasso <- cv.glmnet(x, y, alpha = 1)\n\ncoef(lasso_model, s = cv_lasso$lambda.min)\n# Plotting the coefficient path\nplot(lasso_model, xvar = \"lambda\", label = TRUE)\n# Create a ggplot\n\n\n\n# Plotting cross-validation plot to see the optimal lambda\nplot(cv_lasso)\n\n# Creating a new data frame for predictions\nage_range <- seq(min(data1$Age), max(data1$Age), by = 1)\npa_levels <- seq(min(data1$Physical.Activity.Level), max(data1$Physical.Activity.Level), length.out = 100)\n\n# Creating a grid of Age and Physical Activity levels\ngrid_data <- expand.grid(Age = age_range, Physical.Activity.Level = pa_levels)\n# Correcting newdata matrix generation\ngrid_data_matrix <- model.matrix(~ Age * Physical.Activity.Level, data = grid_data)[, -1]\n# Predicting using the correct newx argument\ngrid_data$Quality_of_Sleep_Pred <- predict(lasso_model, newx = grid_data_matrix, s = cv_lasso$lambda.min)\n\n# Plotting\na = ggplot(grid_data, aes(x = Age, y = Physical.Activity.Level, fill = Quality_of_Sleep_Pred)) +\n  geom_tile() +\n  scale_fill_gradient2(low = \"blue\", high = \"red\", mid = \"white\", midpoint = median(grid_data$Quality_of_Sleep_Pred), space = \"Lab\", name = \"Predicted\\nSleep Quality\") +\n  labs(x = \"Age\", y = \"Physical Activity Level\", title = \"Predicted Sleep Quality Across Age and Physical Activity Levels\") +\n  theme_minimal() +\n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n\nggplotly(a)\n\n\n\n```\n\n## [**RESEARCH QUESTION- 2**]{.underline}\n\n**What are the key predictors influencing sleep quality, and how can we predict sleep quality based on lifestyle and health metrics?**\n\n```{r}\nlibrary(randomForest)\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(dplyr)\n\n# Load the dataset\ndata1 <- read.csv(\"C:/Users/ACER/Desktop/New folder/Sai Sriram Uppada/FinalProject/Sleep_health_and_lifestyle_dataset.csv\")  # Replace with the path to the original dataset\n\n# Split the \"Blood Pressure\" into \"Systolic BP\" and \"Diastolic BP\"\ndata1 <- data1 %>%\n  mutate(Systolic.BP = as.integer(sub(\"/.*\", \"\", Blood.Pressure)),\n         Diastolic.BP = as.integer(sub(\".*/\", \"\", Blood.Pressure)))\n\n# Fit Random Forest model to predict sleep quality\nset.seed(123)  # for reproducibility\nrf_model <- randomForest(Quality.of.Sleep ~ Age + Physical.Activity.Level + Stress.Level + Heart.Rate + Systolic.BP + Diastolic.BP, \n                         data=data1, importance=TRUE, ntree=500)\n\n# Check out the model summary\nprint(rf_model)\n\n# Variable importance plot\nimportance_data <- importance(rf_model)\nvarImpPlot(rf_model)\n\n# Predict sleep quality\npredicted_quality <- predict(rf_model, data1)\n\n# Create a plot of actual vs predicted sleep quality\ndata1$Predicted_Quality_of_Sleep <- predicted_quality\na = ggplot(data1, aes(x=Quality.of.Sleep, y=Predicted_Quality_of_Sleep)) +\n  geom_point(alpha=0.5) +\n  geom_smooth(method='lm', color='red') +\n  labs(x=\"Actual Sleep Quality\", y=\"Predicted Sleep Quality\", title=\"Actual vs Predicted Sleep Quality\") +\n  theme_minimal()\n\n\n# Convert ggplot object to an interactive plotly object\nggplotly(a)\n\n\n```\n\n## [**RESEARCH QUESTION- 3**]{.underline}\n\n**Does BMI predict the presence of sleep apnea?**\n\n```{r}\n# Load necessary libraries\nlibrary(readr)\nlibrary(dplyr)\nlibrary(glmnet)\nlibrary(ggplot2)\n\n# Load the dataset (adjust the file path as needed)\nsleep_data <-read.csv(\"C:/Users/ACER/Desktop/New folder/Sai Sriram Uppada/FinalProject/Sleep_health_and_lifestyle_dataset.csv\") \n\n# Rename columns if needed to match the code\n# Assuming \"BMI.Category\" is the column containing BMI information\ncolnames(sleep_data) <- gsub(\"\\\\.\", \"_\", colnames(sleep_data))  \n\n# Prepare the predictor variables and the response\n# Assuming \"BMI_Category\" is the column name for BMI information\nsleep_data$Sleep_Apnea <- as.factor(ifelse(sleep_data$Sleep_Disorder == \"Sleep Apnea\", 1, 0))\npredictors <- model.matrix(~ BMI_Category, sleep_data)[, -1]\nresponse <- sleep_data$Sleep_Apnea\n\n\n# Fit logistic regression model\nfit_apnea <- glmnet(predictors, response, family = \"binomial\")\n\n# Print coefficients\ncoef(fit_apnea)\n\n\n\n# Perform cross-validation\ncv_fit_apnea <- cv.glmnet(predictors, response, family = \"binomial\")\nbest_lambda_apnea <- cv_fit_apnea$lambda.min\n\n\n# Load necessary libraries\nlibrary(pROC)\n\n# Make predictions on the training set\npredictions_train <- predict(cv_fit_apnea, type = \"response\", s = \"lambda.min\", newx = predictors)\n\n# Calculate ROC curve\nroc_curve <- roc(as.numeric(response) -1 , predictions_train)  \n\n# Plot ROC curve with AUC\nplot(roc_curve, main = \"ROC Curve\", col = \"blue\")\nlegend(\"bottomright\", legend = paste(\"AUC =\", round(auc(roc_curve), 2)), col = \"blue\", lty = 1)\n\n```\n","srcMarkdownNoYaml":"\n\n## [**RESEARCH QUESTION- 1**]{.underline}\n\n**How does physical activity level influence sleep quality across different age groups?**\n\n```{r}\n# Load necessary libraries\nlibrary(glmnet)\nlibrary(plotly)\nlibrary(ggplot2)\n# Load the dataset\ndata1 <- read.csv(\"C:/Users/ACER/Desktop/New folder/Sai Sriram Uppada/FinalProject/Sleep_health_and_lifestyle_dataset.csv\")  \n\n# Replace with the path to the original dataset\n\n# Prepare the data\n# Assuming 'Quality_of_Sleep' is a continuous variable and both 'Age' and 'Physical_Activity_Level' are already numerical.\nx <- model.matrix(Quality.of.Sleep ~ Age * Physical.Activity.Level, data = data1)[, -1]  # removing intercept\ny <- data1$Quality.of.Sleep\n\n# Fit Lasso Regression model\nlasso_model <- glmnet(x, y, alpha = 1)  # alpha = 1 for Lasso\n\n# Cross-validation for optimal lambda\ncv_lasso <- cv.glmnet(x, y, alpha = 1)\n\ncoef(lasso_model, s = cv_lasso$lambda.min)\n# Plotting the coefficient path\nplot(lasso_model, xvar = \"lambda\", label = TRUE)\n# Create a ggplot\n\n\n\n# Plotting cross-validation plot to see the optimal lambda\nplot(cv_lasso)\n\n# Creating a new data frame for predictions\nage_range <- seq(min(data1$Age), max(data1$Age), by = 1)\npa_levels <- seq(min(data1$Physical.Activity.Level), max(data1$Physical.Activity.Level), length.out = 100)\n\n# Creating a grid of Age and Physical Activity levels\ngrid_data <- expand.grid(Age = age_range, Physical.Activity.Level = pa_levels)\n# Correcting newdata matrix generation\ngrid_data_matrix <- model.matrix(~ Age * Physical.Activity.Level, data = grid_data)[, -1]\n# Predicting using the correct newx argument\ngrid_data$Quality_of_Sleep_Pred <- predict(lasso_model, newx = grid_data_matrix, s = cv_lasso$lambda.min)\n\n# Plotting\na = ggplot(grid_data, aes(x = Age, y = Physical.Activity.Level, fill = Quality_of_Sleep_Pred)) +\n  geom_tile() +\n  scale_fill_gradient2(low = \"blue\", high = \"red\", mid = \"white\", midpoint = median(grid_data$Quality_of_Sleep_Pred), space = \"Lab\", name = \"Predicted\\nSleep Quality\") +\n  labs(x = \"Age\", y = \"Physical Activity Level\", title = \"Predicted Sleep Quality Across Age and Physical Activity Levels\") +\n  theme_minimal() +\n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n\nggplotly(a)\n\n\n\n```\n\n## [**RESEARCH QUESTION- 2**]{.underline}\n\n**What are the key predictors influencing sleep quality, and how can we predict sleep quality based on lifestyle and health metrics?**\n\n```{r}\nlibrary(randomForest)\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(dplyr)\n\n# Load the dataset\ndata1 <- read.csv(\"C:/Users/ACER/Desktop/New folder/Sai Sriram Uppada/FinalProject/Sleep_health_and_lifestyle_dataset.csv\")  # Replace with the path to the original dataset\n\n# Split the \"Blood Pressure\" into \"Systolic BP\" and \"Diastolic BP\"\ndata1 <- data1 %>%\n  mutate(Systolic.BP = as.integer(sub(\"/.*\", \"\", Blood.Pressure)),\n         Diastolic.BP = as.integer(sub(\".*/\", \"\", Blood.Pressure)))\n\n# Fit Random Forest model to predict sleep quality\nset.seed(123)  # for reproducibility\nrf_model <- randomForest(Quality.of.Sleep ~ Age + Physical.Activity.Level + Stress.Level + Heart.Rate + Systolic.BP + Diastolic.BP, \n                         data=data1, importance=TRUE, ntree=500)\n\n# Check out the model summary\nprint(rf_model)\n\n# Variable importance plot\nimportance_data <- importance(rf_model)\nvarImpPlot(rf_model)\n\n# Predict sleep quality\npredicted_quality <- predict(rf_model, data1)\n\n# Create a plot of actual vs predicted sleep quality\ndata1$Predicted_Quality_of_Sleep <- predicted_quality\na = ggplot(data1, aes(x=Quality.of.Sleep, y=Predicted_Quality_of_Sleep)) +\n  geom_point(alpha=0.5) +\n  geom_smooth(method='lm', color='red') +\n  labs(x=\"Actual Sleep Quality\", y=\"Predicted Sleep Quality\", title=\"Actual vs Predicted Sleep Quality\") +\n  theme_minimal()\n\n\n# Convert ggplot object to an interactive plotly object\nggplotly(a)\n\n\n```\n\n## [**RESEARCH QUESTION- 3**]{.underline}\n\n**Does BMI predict the presence of sleep apnea?**\n\n```{r}\n# Load necessary libraries\nlibrary(readr)\nlibrary(dplyr)\nlibrary(glmnet)\nlibrary(ggplot2)\n\n# Load the dataset (adjust the file path as needed)\nsleep_data <-read.csv(\"C:/Users/ACER/Desktop/New folder/Sai Sriram Uppada/FinalProject/Sleep_health_and_lifestyle_dataset.csv\") \n\n# Rename columns if needed to match the code\n# Assuming \"BMI.Category\" is the column containing BMI information\ncolnames(sleep_data) <- gsub(\"\\\\.\", \"_\", colnames(sleep_data))  \n\n# Prepare the predictor variables and the response\n# Assuming \"BMI_Category\" is the column name for BMI information\nsleep_data$Sleep_Apnea <- as.factor(ifelse(sleep_data$Sleep_Disorder == \"Sleep Apnea\", 1, 0))\npredictors <- model.matrix(~ BMI_Category, sleep_data)[, -1]\nresponse <- sleep_data$Sleep_Apnea\n\n\n# Fit logistic regression model\nfit_apnea <- glmnet(predictors, response, family = \"binomial\")\n\n# Print coefficients\ncoef(fit_apnea)\n\n\n\n# Perform cross-validation\ncv_fit_apnea <- cv.glmnet(predictors, response, family = \"binomial\")\nbest_lambda_apnea <- cv_fit_apnea$lambda.min\n\n\n# Load necessary libraries\nlibrary(pROC)\n\n# Make predictions on the training set\npredictions_train <- predict(cv_fit_apnea, type = \"response\", s = \"lambda.min\", newx = predictors)\n\n# Calculate ROC curve\nroc_curve <- roc(as.numeric(response) -1 , predictions_train)  \n\n# Plot ROC curve with AUC\nplot(roc_curve, main = \"ROC Curve\", col = \"blue\")\nlegend(\"bottomright\", legend = paste(\"AUC =\", round(auc(roc_curve), 2)), col = \"blue\", lty = 1)\n\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"Final ProjectCode.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","editor":"visual","theme":"cosmo","page-layout":"full","title":"Final Project Code"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}